// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //This is a layout of the wiring setup display in the workshop sheet, it is a little bit confusing, I'd recommend looking at that if you do not understand it

    //input instruction, if type is 1 (c-instruction), use the output from the previous tick otherwise load the A-register with the instruction
    Mux16(a=instruction, b=ALUout, sel=typeOut, out=aMuxOut);

    //Decode the ALU instruction for input
    Decode(in=instruction, 
        j1=j1A, j2=j2B,j3=j3C,
        d1=dAOut, d2=dBOut, d3=writeM, //dAOut refers to A register load, dBOut refers to the D register, d3 is a conditional whether to write to memory instead
        c1=cAout,c2=cBout,c3=cCout,c4=cDout,c5=cEout,c6=cFout,
        a=aOut,
        type=typeOut);

    //If A register input (taken from decode), load the A register with the relevant in from the Mux above, first 0 - 15 bits is the address in  memory, out is the value in A register
    ARegister(in=aMuxOut, load=dAOut, out[0..14] = addressM,out=aRegOut);

    //Take the value in the A register or input if is an A instruction and use as y-input
    Mux16(a=aRegOut, b=inM, sel=aOut, out=yIn);//yInput

    //If D instruction, load the output from the previous ALU out and input it back into the ALU as X
    DRegister(in=ALUout, load=dBOut, out=xIn);//DReg & xInput

    
    Jump(j1=j1A,j2=j2B,j3=j3C,zr=zerop,ng=nop,jump=jumpOut); //if jump conditional

    
    Not(in=jumpOut,out=NotJump); //invert jump input

    //ALU calculaltions, out the output
    ALU(x=xIn, y=yIn, zx=cAout, nx=cBout, zy=cCout, ny=cDout, f=cEout, no=cFout, out=ALUout,out=outM, zr=zerop, ng=nop);

    //Memory location is in the input, the load is the jump (e.g. if jump =  true, access the next location in memory), if jump is not true, increment the value in memory by 1 (im confused by this two) it is question 7 in the workshop, 
    //Values 0 - 15 result in out =  the value in pc. (I do not really get this part)
    PC(in=aRegOut, load=jumpOut, inc=NotJump, reset=reset, out[0..14]=pc);



}